// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // The instruction can have two forms.
    // 1 1 1 a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    // and
    // 0 v v v  v  v  v  v  v  v  v  v  v  v  v  v
    /* DMux(in=true, sel=instruction[15], a=A, b=C);
    ARegister(in=Ain, load=loadA, out=Aout);
    // If we have an A instruction or a C instruction with d1 = 1, load A
    Or(a=instruction[15], b=instruction[5], out=loadA);
    // Load D?
    DRegister(in=ALUout, load=instruction[4], out=Dout);
    // Load M?
    And(a=instruction[15], b=instruction[3], out=writeM);
    DMux8Way(in=true, sel=instruction[0..2], a=NoJump, b=JGT, c=JEQ,
        d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);
    ALU(x=Dout, y=AorM, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, zr=zero, ng=neg);*/
        
        
    // Basing myself on the proposed implementation given in the course
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=Ain);
    Not(in=instruction[15], out=notopcode);
    // If the opcode is 0, notopcode is 1, so the Or is true.
    // Otherwise, if d1 is 1, the Or is true.
    Or(a=notopcode, b=instruction[5], out=loadA);
    ARegister(in=Ain, load=loadA, out=Aout, out[0..14]=addressM);
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AorM);
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=Dout);
    ALU(x=Dout, y=AorM, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, out=outM, zr=zero, ng=neg);
    And(a=instruction[15], b=instruction[3], out=writeM);
    PC(in=Aout, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
    // Decide whether to jump
    DMux8Way(in=instruction[15], sel=instruction[0..2], a=NoJump, 
        b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);
    Not(in=zero, out=notzero);
    Not(in=neg, out=pos);
    And(a=pos, b=notzero, out=gt);
    Or(a=pos, b=zero, out=ge);
    And(a=neg, b=notzero, out=lt);
    Or(a=neg, b=zero, out=le);
    And(a=JGT, b=gt, out=jgt);
    And(a=JEQ, b=zero, out=jeq);
    And(a=JGE, b=ge, out=jge);
    And(a=JLT, b=lt, out=jlt);
    And(a=JNE, b=notzero, out=jne);
    And(a=JLE, b=le, out=jle);
    Or8Way(in[0]=false, in[1]=jgt, in[2]=jeq, in[3]=jge, in[4]=jlt,
        in[5]=jne, in[6]=jle, in[7]=JMP, out=loadPC);
}