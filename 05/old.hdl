// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    Keyboard(out=kout);
    Screen(in=in, load=scl, address=address[2..14], out=scout);
    RAM16K(in=in, load=rml, address=address[1..14], out=rmout);
    // With values up to 0 on the MSB and 1 on all the other bits,
    // we are accessing the RAM. With 1 on the two first MSBs and
    // 0 on the rest, we are accessing the keyboard. With 1 on the
    // MSB and 0 on the second MSB, we are accessing the screen.
    // With 1 on the first two MSBs and any 1s anywhere else, we
    // have an invalid address.
    /*Not(in=address[0], out=rmin);
    DMux4Way(in=true, sel=address[0..1], c=scin);
    Or8Way(in[0..2]=false, in[3..7]=address[2..6], out=msbs);
    Or8Way(in=address[7..15], out=lsbs);
    Or(a=msbs, b=lsbs, out=lsbs13);
    DMux8Way(in=true, sel[0..1]=address[0..1], sel[2]=lsbs13, g=kb, h=inv);*/
    // We can multiplex scin, rmin, and kb to determine what the out will be.
    // 
    
    DMux8Way(in=true, sel=address[0..2], a=rm1, b=rm2, c=rm3, d=rm4,
        e=sc1, f=sc2, g=kb);
    Or8Way(in[0..3]=false, in[4]=rm1, in[5]=rm2, in[6]=rm3, in[7]=rm4,
        out=rmin);
    Or(a=sc1, b=sc2, out=scin);
    And(a=scin, b=load, out=scl);
    And(a=rmin, b=load, out=rml);
    Mux8Way16(h=false, g=false, f=false, e=rmout, d=false, c=scout, b=kout, 
        a=false, sel[0]=rmin, sel[1]=scin, sel[2]=kb, out=out);
    
}