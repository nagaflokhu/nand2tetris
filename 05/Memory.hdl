// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    RAM16K(in=in, load=rml, address=address[0..13], out=rmout);
    Screen(in=in, load=scl, address=address[0..12], out=scout);
    Keyboard(out=kbout);
    
    DMux8Way(in=true, sel=address[12..14], a=rm1, b=rm2, c=rm3, d=rm4,
        e=sc1, f=sc2, g=readkb, h=inv);
    Or8Way(in[0..3]=false, in[4]=rm1, in[5]=rm2, in[6]=rm3, in[7]=rm4,
        out=readram);
    Or(a=sc1, b=sc2, out=readscreen);
    And(a=readscreen, b=load, out=scl);
    And(a=readram, b=load, out=rml);
    Mux8Way16(h=false, g=false, f=false, e=rmout, d=false, c=scout, b=kbout, 
        a=false, sel[2]=readram, sel[1]=readscreen, sel[0]=readkb, out=out);
    //Mux8Way16(b=rmout, sel[0]=readram, sel[1]=readscreen, sel[2]=readkb, out=out);
    
}